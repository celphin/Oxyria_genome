#--------------------------------------------------------------------------------
# MAIN CONFIGURATION PARAMETERS (INTERNAL CONFIG FILE)
#Cancel all jobs if fail: squeue -u $USER -h | awk '{print $1}' | xargs scancel
#--------------------------------------------------------------------------------

CHRS = [str(i) for i in range(1, 42)]
#CHRS = '1 2 3 4 5 6 7 8 9'.split()
PROJECT = "JARUPZ"
REFERENCE = "MAIN_FASTAs/GCA_031213475.1_uoNerLuet1.0_genomic.fna"
AED_FILTER = '0.8'.split()
NANOPORE_FILTER = '10'

#--------------------------------------------------------------------------------
# TargetRule FINAL_GFF3
#--------------------------------------------------------------------------------

rule FINAL_GFF3:
	input:
		expand("{Main_Reference}",Main_Reference=REFERENCE),
		expand("{Project}/Maker_Files/csa.trans.Protein.10072011.fasta",Project=PROJECT),
		expand("{Project}/Maker_Files/PK_Repeat_contigs_RE_filtered_min500bp.fa",Project=PROJECT),
		expand("{Project}/Ref/scaffold_{Chrs}.fasta",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/EDTA_Files/scaffold_{Chrs}.fasta.mod.EDTA.TEanno.gff3",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/EDTA_Files/scaffold_{Chrs}.fasta.mod.EDTA.TElib.fa",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/EDTA_Files/{Project}_chr{Chrs}.masked.fasta",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/Maker_Files/Chr{Chrs}/scaffold_{Chrs}.maker.output/scaffold_{Chrs}_master_datastore_index.log",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/Maker_Files/Chr{Chrs}/scaffold_{Chrs}.maker.output/scaffold_{Chrs}.all.gff",Project=PROJECT,Chrs = CHRS),
		expand("{Project}/Maker_Files/Chr{Chrs}/MAKER_Filtered.scaffold_{Chrs}.all.AED_{AED_filter}.gff3",Project=PROJECT,Chrs = CHRS,AED_filter=AED_FILTER),
		expand("{Project}/Post_Maker_Files/MAKER_ORF_Filtered_{Project}.scaffold_{Chrs}.AED_{AED_filter}.gff3",Project=PROJECT,Chrs = CHRS,AED_filter=AED_FILTER),
		expand("{Project}/FINAL_ANNOTATION/FINAL_{Project}.AED_{AED_filter}.sorted.gff3",Project=PROJECT,AED_filter=AED_FILTER),
		expand("{Project}/Summary_data/JML.{Project}.AED_{AED_filter}_GFF3_summary.txt",Project=PROJECT,AED_filter=AED_FILTER),
		expand("{Project}/Summary_data/{Project}.AED_{AED_filter}_protein.fasta",Project=PROJECT,AED_filter=AED_FILTER),
		expand("{Project}/Summary_data/{Project}.AED_{AED_filter}_busco/short_summary.specific.eudicots_odb10.{Project}.AED_{AED_filter}_busco.txt",Project=PROJECT,AED_filter=AED_FILTER),

	params:
		project=PROJECT,
	shell:
		"""
		echo Pipeline Finished correctly for {params.project}..... CONGRATS!!! > {params.project}.Pipeline_complete.txt
		mv *.err {params.project}/logs
		mv *.out {params.project}/logs
		date "+DATE: %D%nTIME: %T" >> {params.project}.Pipeline_complete.txt
		
		cp -v {params.project}/FINAL_ANNOTATION/FINAL_{params.project}_v1_2.sorted.flagged.gff3 {params.project}/{params.project}.Rieseberg.v1_2.gff3
		echo final annotation file located at: {params.project}/{params.project}.Rieseberg.v1_2.gff3 >> {params.project}.Pipeline_complete.txt
		echo Pipeline Finished correctly for {params.project}..... CONGRATS!!!
		"""	

#--------------------------------------------------------------------------------
# Init: Initializing files and folder
#--------------------------------------------------------------------------------
rule Init:
	input:
		reference={REFERENCE},
		maker_files="Maker_Files.zip",
		Assembly_spliter="Assembly_Chr_splitter.R",
	output:
		Main_fasta=expand("{Project}/Ref/{Project}_Main.fasta",Project=PROJECT),
		Protein_File=expand("{Project}/Maker_Files/csa.trans.Protein.10072011.fasta",Project=PROJECT),
		Repeats_File=expand("{Project}/Maker_Files/PK_Repeat_contigs_RE_filtered_min500bp.fa", Project=PROJECT),
	params:
		project=PROJECT,
	shell:
		"""
		echo $PWD

		mkdir -p {params.project}
		mkdir -p {params.project}/Ref


#		snakemake --dag | dot -Tsvg > {params.project}/dag.svg

		unzip -o Maker_Files.zip -d {params.project}

		cp -v  {input.reference} {output.Main_fasta}

		#Index FASTA file
		samtools faidx {output.Main_fasta} 
		
		cd {params.project}
		
		"""


#--------------------------------------------------------------------------------
# Chr_splitting: Split the Main Assembly in Chromosomes for easy handling
#--------------------------------------------------------------------------------

rule Chr_splitting:
	input:
		rules.Init.output.Main_fasta,
	output:
		expand("{Project}/Ref/scaffold_{Chrs}.fasta",Project=PROJECT,Chrs=CHRS),
		
	params:
		project=PROJECT,
	shell:
		"""
		echo Assembly_Chr_splitter.R --args -f {input} 

		echo Assembly split into Chromosomes
		R --vanilla < Assembly_Chr_splitter.R --args -f {input} &&
		mv *scaffold*.fasta {params.project}/Ref/

		"""

#--------------------------------------------------------------------------------
# EDTA_individual: Look for TE elements on individual Fasta Chr
#--------------------------------------------------------------------------------
rule EDTA_individual:
	input:
		rules.Chr_splitting.output,
	output:
		gff3_file="{Project}/EDTA_Files/scaffold_{Chrs}.fasta.mod.EDTA.TEanno.gff3",
		repeats_file="{Project}/EDTA_Files/scaffold_{Chrs}.fasta.mod.EDTA.TElib.fa",
	params:
		project=PROJECT,
	shell:
		"""
		cp {params.project}/Ref/scaffold_{wildcards.Chrs}.fasta {params.project}/EDTA_Files
		cp -v Name_checker_pre.sh {params.project}/EDTA_Files
		cp -v Name_checker_post.sh {params.project}/EDTA_Files
		
		cd {params.project}/EDTA_Files
		
		echo "Name_cheker pre and post correct EDTA bigger than 15 characters name error on FASTA."
		bash Name_checker_pre.sh scaffold_{wildcards.Chrs}.fasta {params.project}
		
		set +u
		eval "$(conda shell.bash hook)"
		conda activate EDTA
		set -u
			echo starting EDTA process on: scaffold_{wildcards.Chrs}.fasta
			EDTA.pl --overwrite 0 --genome scaffold_{wildcards.Chrs}.fasta --sensitive 0 --anno 1 --evaluate 0 --threads 16 --force 1
		conda deactivate
		set +u
		
		bash Name_checker_post.sh scaffold_{wildcards.Chrs}.fasta {params.project} scaffold_{wildcards.Chrs}.fasta.mod.EDTA.TEanno.gff3
		"""

#--------------------------------------------------------------------------------
# Masked_FASTA: Create masked fasta for further analysis from EDTA results.
#--------------------------------------------------------------------------------

rule Masked_FASTA:
	input:
		EDTA_repeats_file=rules.EDTA_individual.output.gff3_file,
		reference=rules.Chr_splitting.output,
	output:
		masked_fasta_file="{Project}/EDTA_Files/{Project}_chr{Chrs}.masked.fasta",
	params:
		project=PROJECT,
	shell:
		"""
		cd {params.project}/EDTA_Files
		echo "Creating Masked Reference Genome for scaffold_{wildcards.Chrs}.masked.fasta"
		bedtools maskfasta -fi scaffold_{wildcards.Chrs}.fasta -bed scaffold_{wildcards.Chrs}.fasta.mod.EDTA.TEanno.gff3 -fo {params.project}_chr{wildcards.Chrs}.masked.fasta
		"""

#--------------------------------------------------------------------------------
# MAKER3: Perform Maker Analysis, using 3 iterations.
#--------------------------------------------------------------------------------

rule MAKER3:
	input:
		reference=rules.Chr_splitting.output,
		Protein_File=rules.Init.output.Protein_File,
		Repeats_File=rules.EDTA_individual.output.repeats_file,
	output:
		"{Project}/Maker_Files/Chr{Chrs}/scaffold_{Chrs}.maker.output/scaffold_{Chrs}_master_datastore_index.log",
	params:
		project=PROJECT,
	shell:
		"""
		BASEDIR=$PWD 
		cd {params.project}/Maker_Files
		
		echo Creating Maker Files Chr: {wildcards.Chrs}
		mkdir -p Chr{wildcards.Chrs}
		cd Chr{wildcards.Chrs}
		maker -CTL
		cd ..
		cp maker_opts.template Chr{wildcards.Chrs}/maker_opts.ctl
		echo "########################" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "#-----Custom Parameters (these are always required)" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo genome=$BASEDIR/{params.project}/Ref/scaffold_{wildcards.Chrs}.fasta >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "protein=$BASEDIR/{input.Protein_File}" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "repeat_protein=$BASEDIR/{input.Repeats_File}" >> Chr{wildcards.Chrs}/maker_opts.ctl
		echo "augustus_species=arabidopsis" >> Chr{wildcards.Chrs}/maker_opts.ctl
		
		cd Chr{wildcards.Chrs}
		
		maker
		"""

#--------------------------------------------------------------------------------
# POST_MAKER: Create the consensus of gff and correct map name
#--------------------------------------------------------------------------------

rule POST_MAKER:
	input:
		Maker_File=rules.MAKER3.output,
	output:
		"{Project}/Maker_Files/Chr{Chrs}/scaffold_{Chrs}.maker.output/scaffold_{Chrs}.all.gff",
	params:
		project=PROJECT,
		AED_filter=AED_FILTER,
	shell:
		"""
		cd {params.project}/Maker_Files
		cp quality_filter.pl Chr{wildcards.Chrs}/scaffold_{wildcards.Chrs}.maker.output
		
		cd Chr{wildcards.Chrs}/scaffold_{wildcards.Chrs}.maker.output
		fasta_merge -d scaffold_{wildcards.Chrs}_master_datastore_index.log
		gff3_merge -d scaffold_{wildcards.Chrs}_master_datastore_index.log
		maker_map_ids --prefix {params.project}_Chr{wildcards.Chrs} --justify 8 scaffold_{wildcards.Chrs}.all.gff > map
		map_gff_ids map scaffold_{wildcards.Chrs}.all.gff
		#map_fasta_ids map scaffold_{wildcards.Chrs}.all.maker.proteins.fasta
		#map_fasta_ids map scaffold_{wildcards.Chrs}.all.maker.transcripts.fasta
		cd ../../..
		"""

#--------------------------------------------------------------------------------
# AED_FILTER: Perform Maker Analysis, using 3 differente AED filter values
#--------------------------------------------------------------------------------

rule AED_FILTER:
	input:
		Maker_File=rules.POST_MAKER.output,
	output:
		"{Project}/Maker_Files/Chr{Chrs}/MAKER_Filtered.scaffold_{Chrs}.all.AED_{AED_filter}.gff3",
	params:
		project=PROJECT,
		AED_filter=AED_FILTER,
	shell:
		"""
		cd {params.project}/Maker_Files
		cd Chr{wildcards.Chrs}/scaffold_{wildcards.Chrs}.maker.output
		#####AED filter#####
		
		perl quality_filter.pl -a {wildcards.AED_filter} scaffold_{wildcards.Chrs}.all.gff > scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff 
		cd ..
		sed -n 1p scaffold_{wildcards.Chrs}.maker.output/scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff  > MAKER_Filtered.scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff3
		awk '$2 == "maker"' scaffold_{wildcards.Chrs}.maker.output/scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff >> MAKER_Filtered.scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff3
		cd ../../.
		"""


#------------------------------------------------------------------------------------
# ORF_analysis: Uses EDTA maked fasta file and ORF analysis to determine viable genes
#------------------------------------------------------------------------------------

rule ORF_analysis:
	input:
		GFF3_File=rules.AED_FILTER.output,
		Ref_File=rules.Chr_splitting.output,
		Masked_FASTA_File=rules.Masked_FASTA.output,
	output:
		"{Project}/Post_Maker_Files/MAKER_ORF_Filtered_{Project}.scaffold_{Chrs}.AED_{AED_filter}.gff3",
	params:
		project=PROJECT,
		AED_filter=AED_FILTER,
	shell:
		"""
		BASEDIR=$PWD 
		cp -v Post_Maker_ORF_Analysis_Terminal.R {params.project}/Post_Maker_Files
		cd {params.project}/Post_Maker_Files 

		R --vanilla < Post_Maker_ORF_Analysis_Terminal.R --args -g $BASEDIR/{params.project}/Maker_Files/Chr{wildcards.Chrs}/MAKER_Filtered.scaffold_{wildcards.Chrs}.all.AED_{wildcards.AED_filter}.gff3 -a $BASEDIR/{params.project}/Ref/scaffold_{wildcards.Chrs}.fasta -m $BASEDIR/{params.project}/EDTA_Files/{params.project}_chr{wildcards.Chrs}.masked.fasta -o {params.project}.scaffold_{wildcards.Chrs}.AED_{wildcards.AED_filter}

		cd ../../.
		"""


#------------------------------------------------------------------------------------
# Chr_merge: Fuse all gff3 individual chromosomes into complete assembly again
#------------------------------------------------------------------------------------

rule Chr_merge:
	input:
		expand("{Project}/Post_Maker_Files/MAKER_ORF_Filtered_{Project}.scaffold_{Chrs}.AED_{AED_filter}.gff3",Project=PROJECT,Chrs = CHRS,AED_filter=AED_FILTER),
	output:
		"{Project}/FINAL_ANNOTATION/FINAL_{Project}.AED_{AED_filter}.sorted.gff3",
	params:
		project=PROJECT,
		Chrs=CHRS,
	shell:
		"""
		cat {params.project}/Post_Maker_Files/MAKER_ORF_Filtered_{params.project}.scaffold_1.AED_{wildcards.AED_filter}.gff3 > {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.gff3
		
		for i in {{2,3,4,5,6,7,8,9}}
			do
			tail -n +4 {params.project}/Post_Maker_Files/MAKER_ORF_Filtered_{params.project}.scaffold_$i.AED_{wildcards.AED_filter}.gff3 >> {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.gff3
			done
		
		/DATA/home/jmlazaro/github/gff3sort/gff3sort.pl --chr_order original {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.gff3 > {params.project}/FINAL_ANNOTATION/FINAL_{params.project}.AED_{wildcards.AED_filter}.sorted.gff3
		"""


#------------------------------------------------------------------------------------
# GFF3_statistics: Calculate Statistics for Original and filtered GFF3 files
#------------------------------------------------------------------------------------

rule GFF3_statistics:
	input:
		GFF3_file=rules.Chr_merge.output,
	output:
		New_GFF3_summary="{Project}/Summary_data/JML.{Project}.AED_{AED_filter}_GFF3_summary.txt",
	params:
		project=PROJECT,
	shell:
		"""
		BASEDIR=$PWD
		cp -v GFF3_Summary_Statistics.R {params.project}/Summary_data/
		cd {params.project}/Summary_data/
		
		echo Calculating Statistics on New processed file
		R --vanilla < GFF3_Summary_Statistics.R --args --gff $BASEDIR/{input.GFF3_file} -o JML.{params.project}.AED_{wildcards.AED_filter}
		
		cd ../..
		"""

#------------------------------------------------------------------------------------
# Summary_statistics: Get summary of the new gff3 file
#------------------------------------------------------------------------------------

rule Summary_statistics:
	input:
		GFF3_file=rules.Chr_merge.output,
	output:
		Protein_FASTA="{Project}/Summary_data/{Project}.AED_{AED_filter}_protein.fasta",
	params:
		project=PROJECT,
	shell:
		"""
		BASEDIR=$PWD
		cd {params.project}/Post_Maker_Files

			echo starting PROTEIN MERGE process on: GFF3_{wildcards.AED_filter}.fasta
			cat predicted_proteins*AED_{wildcards.AED_filter}.fasta > $BASEDIR/{params.project}/Summary_data/{params.project}.AED_{wildcards.AED_filter}_protein.fasta

		echo Protein File Generated correctly CORRECTLY ....
		cd ../..
		"""
#---------------------------------------------------------------------------------------
# BUSCO: Evaluate the Predicted_Protein results into BUSCO protein mode from Original GFF3
#---------------------------------------------------------------------------------------

rule BUSCO:
    input:
        Protein_fasta=rules.Summary_statistics.output.Protein_FASTA,
    output:
        Busco_results="{Project}/Summary_data/{Project}.AED_{AED_filter}_busco/short_summary.specific.eudicots_odb10.{Project}.AED_{AED_filter}_busco.txt",
    params:
        project=PROJECT,
    shell:
        """
        BASEDIR=$PWD
        
        docker run -v $BASEDIR:$BASEDIR -w $BASEDIR/JARUPZ/Summary_data/ ezlabgva/busco:v5.6.1_cv1 \
        busco -f -c 140 -m protein -i /DATA/home/jmlazaro/Projects/Nereocystis_luetkeana/JARUPZ/Summary_data/JARUPZ.AED_0.8_protein.fasta -o JARUPZ.AED_0.8_busco -l stramenopiles_odb10 --augustus

        echo done BUSCO analysis...
        """

